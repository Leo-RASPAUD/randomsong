type Song @model @auth(rules: [{ allow: private, provider: userPools }, { allow: public, provider: iam }]) {
  id: ID!
  name: String!
  description: String
  difficulty: String!
  band: String!
  style: String
}

type SongRating
  @model
  @auth(rules: [{ allow: private, provider: userPools }])
  @key(name: "byUserId", fields: ["userId"]) {
  id: ID!
  userId: ID!
  rating: Int!
  songId: ID!
  song: Song @connection(fields: ["songId"])
}

type SongSkipped
  @model
  @auth(rules: [{ allow: private, provider: userPools }])
  @key(name: "byUserId", fields: ["userId"]) {
  id: ID!
  userId: ID!
  songId: ID!
  song: Song @connection(fields: ["songId"])
}

type User
  @model
  @auth(rules: [{ allow: private, provider: userPools }])
  @key(name: "byUsername", fields: ["username"], queryField: "userByUsername") {
  id: ID!
  username: String!
  email: String!
  songsSkipped: [SongSkipped] @connection(keyName: "byUserId", fields: ["id"])
  songsRating: [SongRating] @connection(keyName: "byUserId", fields: ["id"])
}
